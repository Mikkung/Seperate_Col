import streamlit as st
import pandas as pd
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import Font, Alignment

st.set_page_config(page_title="‡πÅ‡∏¢‡∏Å‡∏ä‡∏µ‡∏ï‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô", page_icon="üìò")

st.title("üìò ‡πÅ‡∏¢‡∏Å‡∏ä‡∏µ‡∏ï‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞ merge cell)")

uploaded_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (.xlsx)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # ‚úÖ ‡∏ñ‡πâ‡∏≤ column ‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ -> ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤ "‡∏•‡∏≥‡∏î‡∏±‡∏ö"
    if not str(df.columns[0]).strip() or "unnamed" in str(df.columns[0]).lower():
        df.columns = ["‡∏•‡∏≥‡∏î‡∏±‡∏ö"] + list(df.columns[1:])
    else:
        df.rename(columns={df.columns[0]: "‡∏•‡∏≥‡∏î‡∏±‡∏ö"}, inplace=True)

    # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô"
    teacher_col = next((c for c in df.columns if "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå" in str(c)), None)

    if not teacher_col:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô'")
    else:
        st.success(f"‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô: '{teacher_col}'")

        if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å‡∏ä‡∏µ‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ"):
            output = BytesIO()

            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                for teacher, group in df.groupby(teacher_col):
                    group = group.copy()

                    # üßπ ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å
                    group = group.iloc[:, :-1]

                    # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏•‡∏≥‡∏î‡∏±‡∏ö"
                    group.rename(columns={group.columns[0]: "‡∏•‡∏≥‡∏î‡∏±‡∏ö"}, inplace=True)

                    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
                    group["‡∏•‡∏≥‡∏î‡∏±‡∏ö"] = range(1, len(group) + 1)

                    # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
                    student_col = next((c for c in group.columns if "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï" in str(c)), None)
                    money_col = next((c for c in group.columns if "‡πÄ‡∏á‡∏¥‡∏ô" in str(c)), None)

                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                    if student_col:
                        group[student_col] = pd.to_numeric(group[student_col], errors='coerce').fillna(0)
                    if money_col:
                        group[money_col] = group[money_col].astype(str).str.replace(',', '', regex=False)
                        group[money_col] = pd.to_numeric(group[money_col], errors='coerce').fillna(0)

                    # ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤
                    total_students = group[student_col].sum() if student_col else ""
                    total_money = group[money_col].sum() if money_col else ""

                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ
                    summary = pd.DataFrame({
